[
  {
    "id": 1,
    "subject": "SQL",
    "category": "DB基礎知識",
    "question": "構造化問合せ言語（SQL）に関して正しい記述はどれですか。",
    "choices": [
      "SQLは階層型データベースに適した言語である",
      "複数の表からデータを結合して抽出するには、SQL文中でそれぞれのROWIDを指定する必要がある。",
      "SQLの特徴として、データを論理的に処理することができ、検索方法を指定する必要はない。",
      "SQLはネットワーク型データベースに適した言語である。"
    ],
    "answer": ["SQLの特徴として、データを論理的に処理することができ、検索方法を指定する必要はない。"],
    "explanation": "SQLは、リレーショナルデータベースを操作するための言語です。\n「ROWID」とは、行データの位置情報のことです。SQLでは、行データの位置情報を指定しなくても、適切にデータを処理できます。\nSQLでは、データ配置の詳細やアクセス手順（検索方法）を意識する必要がありません。表やキーといった論理データ構造を理解していれば、適切にデータを処理できます。",
    "type": "single"
  },
  {
    "id": 2,
    "subject": "SQL",
    "category": "演算",
    "question": "算術演算子の優先順位のルールについて正しい記述はどれですか。",
    "choices": [
      "( )と{ }と[ ]を使用して、式内の算術演算子のデフォルトの優先順位を変更できる。",
      "NULLは式内の算術演算子の優先順位に影響を与える。",
      " + と - のみを含む式では、カッコがない場合、+ が優先される。",
      "優先度が等しい算術演算子は、カッコがない場合、左から右に評価される。"
    ],
    "answer": [
      "優先度が等しい算術演算子は、カッコがない場合、左から右に評価される。"
    ],
    "explanation": "1 つの式に複数の算術演算子が使用されている場合の評価ルールは、通常の数式計算と同じです。具体的には、以下のルールに従います。\n\n・優先順位が高い算術演算子（「*」、「/」）が先に評価されます。\n・優先順位が同じ算術演算子については左（最初）から順に評価されます。\n・式の一部をカッコ（「(」、「)」）で括ると、優先順位を高くできます。",
    "type": "single"
  },
  {
    "id": 3,
    "subject": "SQL",
    "category": "DML",
    "question": "データ操作言語(DML)について正しい記述はどれですか(2つ選択してください)。",
    "choices": [
      "1つのUPDATE文で複数の列の値をまとめて更新することはできない。",
      "1つのUPDATE文のSET句に複数の副問合せを書くことができる。",
      "INSERT文でNULL値を明示的に挿入することはできない。",
      "INSERT文で明示的に値を設定しなかった列には、デフォルト値もしくはNULL値が挿入される。",
      "DELETE文でWHERE句を書かないと1行も削除されない。"
    ],
    "answer": [
      "1つのUPDATE文のSET句に複数の副問合せを書くことができる。",
      "INSERT文で明示的に値を設定しなかった列には、デフォルト値もしくはNULL値が挿入される。"],
    "explanation": "UPDATE文のSET句に、カンマ「, 」で区切って「変更したい列名と値」を複数指定すると、一度に複数の列を変更できます。\n副問合せは、戻す行数、値の数がマッチしてさえいればどこでも指定ができます。また、埋め込むことができる副問合せの数に制約はありません。\nINSERT句に「NULL」を指定すると、NULL値を明示的に挿入できます。\nINSERT文で明示的に値を設定しなかった列には、デフォルト値もしくはNULL値が挿入されます。\nDELETE文でWHERE句を省略すると、すべての行が削除されます。",
    "type": "multiple"
  },
  {
    "id": 4,
    "subject": "SQL",
    "category": "データ型",
    "question": "NUMBER(5,3)として定義した列に値を挿入します。エラーにならずに挿入できる値はどれですか(3つ選択してください)。",
    "choices": [
      "12345",
      "123.45",
      "12.3456",
      "1.2345",
      "1.23456"
    ],
    "answer": [
      "12.3456",
      "1.2345",
      "1.23456"
    ],
    "explanation": "NUMBER(5,3)は、整数部分の最大桁数が2(=5-3)、小数点以下の最大桁数が3です。\nNUMBER(n,m)と表した時、mの数値を超えた場合は四捨五入が行われエラーは発生しません。",
    "type": "multiple"
  },
  {
    "id": 5,
    "subject": "SQL",
    "category": "データ型",
    "question": "次の問合せを確認してください。\n\nSELECT CONCAT(first_name, CONCAT(salary, hire_date)) FROM employees;\n\n正しい記述はどれですか。",
    "choices": [
      "データ型は暗黙変換され、正常に実行される。",
      "ファンクションはネストできないのでエラーになる。",
      "データ型が揃っていないのでエラーになる。",
      "TO_CHAR変換ファンクションを入れる必要がある。"
    ],
    "answer": [
      "データ型は暗黙変換され、正常に実行される。"
    ],
    "explanation": "CONCATファンクションは、文字列を連結する単一行ファンクションです。\n単一行ファンクションは何段階でもネストが可能です。\nsalaryは数値型で、hire_dateは日時型ですが、文字列に暗黙的に変換され、文字列連携が実行されます。(特定のデータ型を想定している箇所で、別のデータ型のデータを受け取ったときに、想定されるデータ型への自動的な変換を「暗黙的なデータ型変換」といいます。)\nTO_CHARファンクションを使用して明示的に変換を行うことも可能ですが、暗黙的変換が機能するため必須ではありません。",
    "type": "single"
  }
]
